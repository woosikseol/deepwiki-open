{
  "page_type": "conventions",
  "page_title": "규칙 및 규약 (명명 규칙, 규칙 등)",
  "content": "# 컨벤션\n\n## 개요\n이 문서는 `python_rag` 프로젝트의 코딩 컨벤션, 명명 규칙 및 모범 사례를 설명합니다. 개발자들이 일관된 코드 스타일을 유지하고 프로젝트의 가독성 및 유지보수성을 높이는 데 도움을 주기 위해 작성되었습니다.\n\n## 명명 규칙\n\n### 파일 명명\n-   **패턴**:\n    *   Python 소스 파일: 소문자 스네이크 케이스 (`snake_case.py`)\n    *   문서 및 설정 파일: 대문자 스네이크 케이스 (`UPPER_SNAKE_CASE.md`) 또는 소문자 (`.env`, `requirements.txt`)\n-   **예시**:\n    *   `main.py`\n    *   `api/config.py`\n    *   `api/gemini_client.py`\n    *   `README.md`\n    *   `requirements.txt`\n    *   `.env`\n-   **규칙**:\n    *   Python 모듈 이름은 짧고 모두 소문자여야 하며, 가독성을 위해 밑줄을 사용할 수 있습니다.\n    *   주요 문서 파일은 대문자 스네이크 케이스를 사용하여 쉽게 식별할 수 있도록 합니다.\n\n### 디렉토리 명명\n-   **패턴**: 소문자 스네이크 케이스 (`snake_case/`)\n-   **예시**:\n    *   `api/`\n    *   `results/`\n-   **규칙**:\n    *   패키지 및 디렉토리 이름은 모두 소문자여야 하며, 가독성을 위해 밑줄을 사용할 수 있습니다.\n\n### 코드 명명\n\n#### 변수\n-   **컨벤션**:\n    *   지역 변수 및 함수 매개변수: 소문자 스네이크 케이스 (`snake_case`)\n    *   환경 변수 및 전역 상수: 대문자 스네이크 케이스 (`UPPER_SNAKE_CASE`)\n-   **예시**:\n    *   `language` (CLI 인자)\n    *   `top_k_results` (함수 내 변수)\n    *   `GEMINI_API_KEY` (환경 변수)\n    *   `DEFAULT_LANGUAGE` (환경 변수/상수)\n\n#### 함수/메서드\n-   **컨벤션**: 소문자 스네이크 케이스 (`snake_case`)\n-   **예시**:\n    *   `answer` (RAG 클래스의 메서드)\n    *   `main` (main.py의 진입점 함수)\n    *   `_load_config` (내부 사용을 위한 private 메서드)\n\n#### 클래스\n-   **컨벤션**: 파스칼 케이스 (`PascalCase`)\n-   **예시**:\n    *   `RAG`\n    *   `GeminiClient` (api/gemini_client.py에 정의될 것으로 예상)\n\n#### 상수\n-   **컨벤션**: 대문자 스네이크 케이스 (`UPPER_SNAKE_CASE`)\n-   **예시**:\n    *   `EMBEDDING_DIMENSION` (config.py 또는 .env에서)\n    *   `TOP_K_RESULTS` (config.py 또는 .env에서)\n    *   `DB_HOST` (환경 변수)\n\n## 코드 구성\n\n### 파일 구조\n-   **표준**:\n    *   프로젝트 루트에는 `main.py` (CLI 진입점), `requirements.txt`, `.env` 및 주요 문서 파일 (`README.md` 등)이 위치합니다.\n    *   핵심 로직은 `api/` 디렉토리 내의 모듈로 구성됩니다.\n    *   생성된 결과물은 `results/` 디렉토리에 저장됩니다.\n-   **예시**:\n    ```\n    python_rag/\n    ├── api/\n    │   ├── __init__.py\n    │   ├── config.py          # 설정 관리\n    │   ├── prompts.py         # 프롬프트 템플릿\n    │   ├── gemini_client.py   # Gemini API 클라이언트\n    │   └── rag.py             # RAG 구현\n    ├── main.py                # CLI 진입점\n    ├── requirements.txt       # Python 의존성\n    ├── .env                   # 환경 설정\n    └── README.md              # 프로젝트 설명\n    ```\n\n### 모듈 구성\n-   **패턴**: `api/` 디렉토리는 핵심 애플리케이션 로직을 위한 패키지 역할을 합니다. 각 파일은 특정 기능을 담당하는 모듈로 분리됩니다.\n-   **예시**:\n    *   `api/config.py`: 환경 변수 로딩 및 애플리케이션 설정 관리\n    *   `api/prompts.py`: Gemini 모델에 전달될 프롬프트 템플릿 정의\n    *   `api/gemini_client.py`: Gemini API와의 상호작용을 캡슐화\n    *   `api/rag.py`: RAG 시스템의 핵심 로직 (임베딩, 검색, 생성) 구현\n\n### 임포트 컨벤션\n-   **표준**: 표준 Python 임포트 규칙을 따릅니다.\n    *   프로젝트 내부 모듈은 절대 경로 임포트를 사용합니다 (예: `from api.config import settings`).\n    *   동일 패키지 내의 모듈 간에는 상대 경로 임포트를 사용할 수 있습니다 (예: `from .prompts import get_rag_prompt`).\n    *   외부 라이브러리 임포트는 별도의 그룹으로 분리하고 알파벳 순서로 정렬합니다.\n\n## 코딩 스타일\n\n### 포맷팅\n-   **표준**: 이 프로젝트는 상위 `deepwiki-open` 프로젝트와 동일한 컨벤션을 따릅니다. 이는 일반적으로 [PEP 8](https://www.python.org/dev/peps/pep-0008/) 스타일 가이드를 준수함을 의미합니다.\n    *   들여쓰기는 4개의 공백을 사용합니다.\n    *   한 줄의 최대 길이는 79자 또는 99자로 제한합니다.\n    *   연산자 주변에 공백을 사용합니다.\n\n### 문서화\n-   **표준**:\n    *   코드의 중요한 부분이나 복잡한 로직에는 명확하고 간결한 주석을 사용합니다.\n    *   함수, 메서드, 클래스에는 Docstring을 사용하여 목적, 인자, 반환 값 등을 설명하는 것을 권장합니다. (현재 명시된 Docstring 스타일은 없으나, PEP 257을 따르는 것을 권장합니다.)\n-   **예시**:\n    ```python\n    # .env.example 파일의 주석\n    # PostgreSQL Configuration\n    DB_HOST=localhost\n    DB_PORT=5432\n    ```\n\n### 에러 핸들링\n-   **패턴**: 외부 서비스(데이터베이스, API)와의 상호작용 시 발생할 수 있는 예외를 명시적으로 처리하기 위해 `try-except` 블록을 사용합니다.\n-   **예시**:\n    ```python\n    # README의 문제 해결 섹션에서 암시된 패턴\n    try:\n        # 데이터베이스 연결 또는 API 호출 로직\n        pass\n    except SomeDatabaseError:\n        print(\"Error: could not connect to server\")\n        # 적절한 에러 처리\n    except GeminiAPIError:\n        print(\"Error: API key is invalid\")\n        # 적절한 에러 처리\n    ```\n\n## 프로젝트별 컨벤션\n\n### 테스팅\n-   **컨벤션**: `pytest` 프레임워크를 사용하여 테스트를 작성합니다.\n-   **패턴**: 테스트 파일은 `tests/` 디렉토리 내에 위치하며, `test_*.py` 또는 `*_test.py` 패턴을 따릅니다. (현재 `TODO: Add test suite` 상태이므로, 향후 구현 시 이 컨벤션을 따를 예정입니다.)\n\n### 설정\n-   **컨벤션**:\n    *   민감한 정보(API 키, DB 자격 증명) 및 환경별 설정은 `.env` 파일을 통해 관리합니다.\n    *   `api/config.py` 모듈을 통해 `.env` 파일의 설정을 로드하고 애플리케이션 전반에서 접근할 수 있도록 합니다.\n-   **예시**:\n    ```bash\n    # .env 파일\n    GEMINI_API_KEY=your_gemini_api_key_here\n    DB_HOST=localhost\n    DB_NAME=code_chunks\n    ```\n\n### 빌드 및 배포\n-   **컨벤션**:\n    *   Python 가상 환경 (`.venv`)을 사용하여 프로젝트 의존성을 격리합니다.\n    *   `requirements.txt` 파일을 통해 모든 Python 의존성을 명시적으로 관리합니다.\n-   **예시**:\n    ```bash\n    python3.11 -m venv .venv\n    source .venv/bin/activate\n    pip install -r requirements.txt\n    ```\n\n## 모범 사례\n-   **가상 환경 사용**: 항상 프로젝트별 가상 환경을 활성화한 후 작업을 수행합니다.\n-   **설정 외부화**: API 키, 데이터베이스 자격 증명 등 민감한 정보는 `.env` 파일을 통해 관리하고, 코드에 직접 하드코딩하지 않습니다.\n-   **모듈화**: 코드를 논리적인 단위로 분리하여 `api/` 패키지처럼 모듈화합니다. 이는 코드의 재사용성과 유지보수성을 높입니다.\n-   **PEP 8 준수**: Python 코드의 가독성과 일관성을 위해 PEP 8 스타일 가이드를 따릅니다.\n-   **명확한 주석 및 Docstring**: 복잡한 로직이나 중요한 함수에는 충분한 주석과 Docstring을 작성하여 코드 이해를 돕습니다.\n-   **예외 처리**: 외부 시스템과의 상호작용 시 발생할 수 있는 예외를 예측하고 적절하게 처리하여 애플리케이션의 안정성을 확보합니다.\n\n## 예시\n\n### 좋은 예시\n`api/config.py` 파일의 일부 (가상):\n```python\n# api/config.py\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv() # .env 파일 로드\n\nclass Settings:\n    GEMINI_API_KEY: str = os.getenv(\"GEMINI_API_KEY\", \"\")\n    DB_HOST: str = os.getenv(\"DB_HOST\", \"localhost\")\n    DB_PORT: int = int(os.getenv(\"DB_PORT\", 5432))\n    DEFAULT_LANGUAGE: str = os.getenv(\"DEFAULT_LANGUAGE\", \"ko\")\n    EMBEDDING_MODEL: str = os.getenv(\"EMBEDDING_MODEL\", \"all-MiniLM-L6-v2\")\n    EMBEDDING_DIMENSION: int = int(os.getenv(\"EMBEDDING_DIMENSION\", 384))\n    TOP_K_RESULTS: int = int(os.getenv(\"TOP_K_RESULTS\", 10))\n\nsettings = Settings()\n\n# main.py 또는 다른 모듈에서 사용 예시\n# from api.config import settings\n# print(settings.GEMINI_API_KEY)\n```\n\n### 피해야 할 안티패턴\n-   **하드코딩된 비밀 정보**: API 키나 데이터베이스 비밀번호를 코드 내에 직접 작성하는 것은 보안상 매우 위험합니다. 항상 `.env` 파일을 통해 관리해야 합니다.\n-   **모든 것을 한 파일에**: 모든 로직을 `main.py`와 같은 단일 파일에 작성하는 것은 코드의 복잡성을 증가시키고 유지보수를 어렵게 만듭니다. `api/` 디렉토리처럼 기능별로 모듈을 분리해야 합니다.\n-   **예외 무시**: `except Exception: pass`와 같이 예외를 단순히 무시하는 것은 문제의 원인을 파악하기 어렵게 만들고 애플리케이션의 안정성을 저해합니다. 항상 구체적인 예외를 처리하고 적절한 로깅 또는 사용자 피드백을 제공해야 합니다.\n-   **일관성 없는 명명**: 변수, 함수, 클래스 이름에 일관성 없는 명명 규칙을 사용하는 것은 코드 가독성을 크게 떨어뜨립니다. 위에 명시된 명명 규칙을 따르도록 합니다.",
  "metadata": {
    "description": "명명 규칙, 코딩 규칙 및 모범 사례"
  },
  "created_at": "2025-10-19T18:50:02.966010",
  "content_hash": "7d1019bd78e7a32958f0a157733c708ee201dadaeed5c31e23fb33bbab4816cd"
}