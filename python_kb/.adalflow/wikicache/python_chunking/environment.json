{
  "page_type": "environment",
  "page_title": "환경 설정 및 가이드",
  "content": "# 개발 환경 설정 및 가이드\n\n## 사전 준비 사항\n\n### 시스템 요구 사항\n- 운영체제: 모든 주요 운영체제 (Linux, macOS, Windows)\n- Python 버전: 3.7 이상 (3.8, 3.9, 3.10, 3.11 권장)\n- 기타 도구: PostgreSQL, pgvector\n\n### 필요한 의존성\n- sentence-transformers (>=2.5.0, <3.0.0)\n- huggingface_hub (>=0.19.0, <0.25.0)\n- Tree-sitter\n- PostgreSQL + pgvector\n- 기타 `requirements.txt`에 명시된 모든 의존성\n\n## 설치 가이드\n\n### 1단계: Python 설치\n```bash\n# 예시: Ubuntu\nsudo apt update\nsudo apt install python3 python3-pip python3-venv\n\n# 예시: macOS (Homebrew 사용)\nbrew install python3\n```\n\n### 2단계: 저장소 복제\n```bash\ngit clone <저장소 URL>\ncd python_chunking\n```\n\n### 3단계: 의존성 설치\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # Linux/Mac\n# 또는\n.venv\\Scripts\\activate     # Windows\npip install -r requirements.txt\n```\n\n### 4단계: 설정\n\n#### 환경 변수\n`.env` 파일을 생성하고 다음 변수를 추가합니다. (필요한 경우)\n```\n# 예시: PostgreSQL 연결 정보\nDATABASE_URL=postgresql://사용자명:비밀번호@localhost:5432/code_chunks\n```\n\n#### 설정 파일\nPostgreSQL 및 pgvector 설정을 완료해야 합니다. 아래 SQL 스크립트를 실행하여 데이터베이스와 테이블을 생성합니다.\n```sql\nCREATE DATABASE code_chunks;\n\\c code_chunks;\nCREATE EXTENSION vector;\n\nCREATE TABLE chunks (\n    id SERIAL PRIMARY KEY,\n    uuid TEXT UNIQUE NOT NULL,\n    path TEXT NOT NULL,\n    cachekey TEXT NOT NULL,\n    content TEXT NOT NULL,\n    start_line INTEGER NOT NULL,\n    end_line INTEGER NOT NULL,\n    index INTEGER NOT NULL,\n    metadata JSONB,\n    embedding vector(384)\n);\n\nCREATE INDEX ON chunks USING hnsw (embedding vector_cosine_ops);\nCREATE INDEX ON chunks USING gin (metadata);\nCREATE INDEX ON chunks (path);\nCREATE INDEX ON chunks (cachekey);\n```\n\n또한 Tree-sitter 파서를 설정해야 합니다.\n```bash\npython setup_vendor.py\npython build_parsers.py\n```\n\n## 검증\n\n### 설치 확인\n다음 명령을 실행하여 필요한 의존성이 설치되었는지 확인합니다.\n```bash\npip list\n```\nPostgreSQL이 실행 중인지 확인합니다.\n```bash\n# macOS 예시\nbrew services list\n```\n\n### 테스트 실행\n`db_test.py` 스크립트를 실행하여 데이터베이스 연결 및 기본 검색 기능을 테스트합니다.\n```bash\npython db_test.py\n```\n\n### 예상 출력\n`db_test.py` 스크립트는 데이터베이스에 연결하고 몇 가지 검색 쿼리를 실행하여 결과를 출력합니다. 오류 없이 성공적으로 실행되면 설치가 완료된 것입니다.\n\n## 개발 워크플로우\n\n### 프로젝트 실행\n\n#### 개발 모드\n```bash\npython main.py ./test_files\n```\n이 명령은 `./test_files` 디렉터리의 코드를 인덱싱합니다.\n\n#### 프로덕션 모드\n프로덕션 환경에서는 적절한 디렉터리를 지정하고, 필요한 환경 변수를 설정해야 합니다.\n```bash\npython main.py /path/to/your/code\n```\n\n### 일반적인 명령어\n- `python main.py <디렉토리>`: 지정된 디렉터리의 코드를 인덱싱합니다.\n- `python db_test.py`: 데이터베이스 연결 및 검색을 테스트합니다.\n- `python drop_table.py`: 데이터베이스 테이블을 삭제합니다. (주의해서 사용)\n\n## 문제 해결\n\n### 문제 1: `sentence-transformers` 설치 오류\n**문제**: `sentence-transformers` 설치 중 호환성 문제 발생.\n**해결**: `requirements.txt`에 명시된 버전을 확인하고, 필요한 경우 명시적으로 버전을 지정하여 설치합니다.\n```bash\npip install \"huggingface_hub>=0.19.0,<0.25.0\"\npip install \"sentence-transformers>=2.5.0,<3.0.0\"\n```\n\n### 문제 2: PostgreSQL 연결 오류\n**문제**: PostgreSQL에 연결할 수 없음.\n**해결**: PostgreSQL이 실행 중인지 확인하고, `DATABASE_URL` 환경 변수가 올바르게 설정되었는지 확인합니다.  사용자 이름, 비밀번호, 호스트, 포트, 데이터베이스 이름이 정확한지 확인하십시오.\n\n## 추가 자료\n- Continue 프로젝트: [https://continue.dev/](https://continue.dev/) (원본 TypeScript 프로젝트)\n- Tree-sitter: [https://tree-sitter.github.io/tree-sitter/](https://tree-sitter.github.io/tree-sitter/)\n- pgvector: [https://github.com/pgvector/pgvector](https://github.com/pgvector/pgvector)\n\n## 개발 팁\n- 가상 환경을 사용하여 프로젝트 의존성을 격리합니다.\n- 코드 변경 후에는 항상 테스트를 실행하여 변경 사항이 예상대로 작동하는지 확인합니다.\n- 디버깅 도구를 사용하여 코드의 문제를 해결합니다. (예: `pdb`)\n",
  "metadata": {
    "description": "환경 설정 및 구성 가이드"
  },
  "created_at": "2025-10-15T18:25:42.038104",
  "content_hash": "67b2f12fc0d79d987f3dd8dc48b5feb178dc874beab3ae0af327be5382a13730"
}