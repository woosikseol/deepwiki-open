{
  "page_type": "project_structure",
  "page_title": "프로젝트 구조 및 개요 (주요 기능 포함, 아키텍처 다이어그램 & 모듈 다이어그램 & 플로우 다이어그램 포함)",
  "content": "# 프로젝트 구조 및 개요\n\n## 개요\n`python_kb`는 로컬 프로젝트의 구조를 분석하고 LLM(Large Language Model)을 활용하여 Wiki 페이지를 자동으로 생성하는 도구입니다. Deepwiki 프로젝트의 변환 과정을 참조하여 개발되었으며, `python_chunking` 프로젝트와 독립적으로 실행될 수 있습니다. 이 도구는 프로젝트 구조, 시스템 아키텍처, 명명/코딩 규칙, 환경 설정 가이드 등 4가지 유형의 Wiki 페이지를 생성하며, Google Gemini 2.5 Flash Lite를 LLM으로 사용합니다. 캐시 시스템, Markdown 출력, Mermaid 다이어그램 구문 검증 및 수정, 다국어 지원 등의 특징을 가지고 있습니다.\n\n## 프로젝트 구조\n\n### 디렉토리 구성\n`python_kb` 프로젝트는 단일 최상위 디렉토리 내에 모든 소스 코드와 관련 파일들을 포함하는 평탄한 구조를 가지고 있습니다. 이는 도구의 목적이 특정 로컬 프로젝트를 분석하는 것이므로, 자체적인 복잡한 내부 구조보다는 분석 대상 프로젝트에 대한 접근과 처리에 중점을 둔 것으로 보입니다.\n- `python_kb/`: 프로젝트의 모든 소스 코드와 설정 파일을 포함하는 루트 디렉토리입니다.\n\n### 주요 컴포넌트\n`python_kb` 프로젝트의 주요 모듈들은 기능별로 명확하게 분리되어 있습니다.\n\n*   **`main.py`**: 프로그램의 진입점(entry point)입니다. 명령줄 인수를 파싱하고, 전체 워크플로우를 Orchestrate합니다.\n*   **`config.py`**: 환경 변수 로드 및 전역 설정을 관리합니다. Gemini API 키, 데이터베이스 설정(향후 사용), 캐시 경로 등의 정보를 제공합니다.\n*   **`prompts.py`**: LLM에 전달될 프롬프트 템플릿을 정의합니다. 다양한 Wiki 페이지 유형(프로젝트 구조, 아키텍처 등)에 대한 프롬프트가 포함되어 있습니다.\n*   **`logging_config.py`**: 애플리케이션의 로깅 설정을 담당합니다. 디버깅 및 운영 중 발생하는 정보를 기록하는 데 사용됩니다.\n*   **`file_tree_analyzer.py`**: 대상 프로젝트의 파일 시스템을 탐색하고 디렉토리 및 파일 구조를 분석합니다. 특정 파일 및 디렉토리를 제외하는 로직을 포함합니다.\n*   **`readme_parser.py`**: 대상 프로젝트의 `README.md` 파일을 파싱하여 주요 정보(개요, 특징 등)를 추출합니다.\n*   **`gemini_client.py`**: Google Gemini LLM API와 상호작용하는 클라이언트입니다. 프롬프트를 LLM에 전달하고 응답을 받습니다.\n*   **`wiki_generator.py`**: 프로젝트 분석 결과와 프롬프트를 바탕으로 LLM을 호출하여 Wiki 페이지 콘텐츠를 생성하는 핵심 로직을 담당합니다.\n*   **`cache_manager.py`**: 생성된 Wiki 콘텐츠 및 메타데이터를 로컬 캐시에 저장하고 관리합니다. DeepWiki와 동일한 `.adalflow/wikicache/` 구조를 사용합니다.\n*   **`markdown_exporter.py`**: 캐시된 Wiki 콘텐츠를 최종 Markdown 파일로 내보냅니다.\n*   **`mermaid_validator.py`**: 생성된 Wiki 콘텐츠 내의 Mermaid 다이어그램 구문을 검증하고, 필요한 경우 자동으로 수정합니다.\n\n### 중요한 파일\n*   **`main.py`**: 프로젝트 실행의 시작점이며, 모든 워크플로우를 제어합니다.\n*   **`config.py`**: 애플리케이션의 핵심 설정 및 환경 변수를 관리하여, 다른 모듈들이 일관된 설정을 사용하도록 합니다.\n*   **`requirements.txt`**: 프로젝트의 Python 의존성 패키지 목록을 정의합니다. `pip install -r requirements.txt` 명령으로 필요한 라이브러리를 설치할 수 있습니다.\n*   **`.env.example`**: 환경 변수 설정의 예시를 제공합니다. 실제 API 키 등 민감한 정보는 `.env` 파일에 저장됩니다.\n*   **`README.md`**: 프로젝트의 개요, 설치, 사용법, 특징, 구조 등 중요한 정보를 담고 있는 문서입니다.\n\n## 주요 기능\n\n### 1. 자동 프로젝트 분석\n- **설명**: 대상 로컬 프로젝트의 파일 구조와 `README.md` 파일을 자동으로 분석하여 Wiki 생성을 위한 기초 데이터를 수집합니다.\n- **구현**: `file_tree_analyzer.py`가 파일 시스템을 탐색하고, `readme_parser.py`가 `README.md`의 내용을 추출합니다. 이들은 `main.py`에서 호출되어 프로젝트 메타데이터를 생성하는 데 기여합니다.\n- **관련 파일**: `main.py`, `file_tree_analyzer.py`, `readme_parser.py`\n\n### 2. LLM 기반 생성 (Google Gemini 2.5 Flash Lite)\n- **설명**: 수집된 프로젝트 분석 데이터와 미리 정의된 프롬프트 템플릿을 사용하여 Google Gemini 2.5 Flash Lite 모델을 통해 고품질의 Wiki 페이지 콘텐츠를 생성합니다.\n- **구현**: `gemini_client.py`가 Gemini API와의 통신을 담당하며, `prompts.py`에 정의된 템플릿과 `file_tree_analyzer.py`, `readme_parser.py`에서 얻은 분석 결과를 `wiki_generator.py`가 조합하여 LLM에 전달합니다.\n- **관련 파일**: `gemini_client.py`, `prompts.py`, `wiki_generator.py`\n\n### 3. 캐시 시스템\n- **설명**: 생성된 Wiki 페이지 콘텐츠를 로컬 파일 시스템에 캐시하여, 동일한 프로젝트에 대한 반복적인 분석 및 LLM 호출 비용을 절감합니다. DeepWiki와 동일한 `.adalflow/wikicache/` 구조를 따릅니다.\n- **구현**: `cache_manager.py`가 캐시 데이터를 저장하고 로드하는 역할을 합니다. `main.py`는 `--no-cache` 또는 `--force` 옵션을 통해 캐시 사용 여부를 제어할 수 있습니다.\n- **관련 파일**: `cache_manager.py`, `main.py`\n\n### 4. Markdown 출력\n- **설명**: 생성된 Wiki 콘텐츠를 표준 Markdown 파일 형식으로 저장합니다. 이는 다양한 문서 뷰어 및 플랫폼에서 쉽게 활용될 수 있도록 합니다.\n- **구현**: `markdown_exporter.py`가 캐시된 Wiki 데이터를 읽어 Markdown 파일로 변환하여 지정된 출력 디렉토리(`python_kb/.adalflow/wikicache/<project_name>/`)에 저장합니다.\n- **관련 파일**: `markdown_exporter.py`, `cache_manager.py`\n\n### 5. Mermaid 다이어그램 구문 검증 및 수정\n- **설명**: 생성된 Wiki 페이지 내에 포함된 Mermaid 다이어그램의 구문이 유효한지 검증하고, 오류가 발견될 경우 자동으로 수정하여 다이어그램의 정확한 렌더링을 보장합니다.\n- **구현**: `mermaid_validator.py`가 LLM이 생성한 텍스트 내의 Mermaid 블록을 찾아 구문 검증 로직을 수행합니다. `--validate-mermaid` 및 `--fix-mermaid` 옵션을 통해 제어됩니다.\n- **관련 파일**: `mermaid_validator.py`, `wiki_generator.py`\n\n### 6. 다국어 지원\n- **설명**: 한국어와 영어 두 가지 언어로 Wiki 페이지를 생성할 수 있도록 지원합니다.\n- **구현**: `prompts.py`에 언어별 프롬프트 템플릿이 정의되어 있으며, `main.py`의 `--language` 옵션을 통해 원하는 출력 언어를 선택할 수 있습니다.\n- **관련 파일**: `prompts.py`, `main.py`, `wiki_generator.py`\n\n### 7. 독립 실행\n- **설명**: `python_kb`는 `python_chunking` 프로젝트와 독립적으로 실행될 수 있도록 설계되었습니다. 이는 모듈 간의 결합도를 낮추고 재사용성을 높입니다.\n- **구현**: `main.py`는 필요한 모든 기능을 자체적으로 포함하거나 내부 모듈을 통해 처리하며, 외부 프로젝트의 직접적인 의존성 없이 동작합니다.\n- **관련 파일**: `main.py` (전반적인 설계 원칙)\n\n## 아키텍처 다이어그램\n\n```mermaid\ngraph TD\nsubgraph User Interaction\nA[사용자]\nend\nsubgraph python_kb Application\nB(main.py)\nC(config.py)\nD(file_tree_analyzer.py)\nE(readme_parser.py)\nF(gemini_client.py)\nG(wiki_generator.py)\nH(cache_manager.py)\nI(markdown_exporter.py)\nJ(mermaid_validator.py)\nK(prompts.py)\nend\nsubgraph External Systems\nL[대상 프로젝트 파일]\nM[\"LLM (Google Gemini)\"]\nend\nsubgraph Storage\nN[\"Wiki 캐시<br/>(.adalflow/wikicache)\"]\nO[Markdown 출력 파일]\nend\nA -- \"명령줄 인수\" --> B\nB -- \"설정 로드\" --> C\nB -- \"프로젝트 경로 제공\" --> D\nB -- \"README 경로 제공\" --> E\nD -- \"파일 구조 분석\" --> L\nE -- \"README 내용 파싱\" --> L\nL -- \"분석 결과\" --> G\nG -- \"프롬프트 & 데이터\" --> F\nF -- \"API 요청/응답\" --> M\nM -- \"생성된 콘텐츠\" --> G\nG -- \"검증 요청\" --> J\nJ -- \"검증/수정 결과\" --> G\nG -- \"캐시 저장 요청\" --> H\nH -- \"캐시 데이터 저장/로드\" --> N\nB -- \"캐시 로드 요청\" --> H\nB -- \"Markdown 내보내기 요청\" --> I\nI -- \"캐시 데이터 로드\" --> H\nI -- \"Markdown 변환\" --> O\nstyle A fill:#f9f,stroke:#333,stroke-width:2px\nstyle M fill:#ccf,stroke:#333,stroke-width:2px\nstyle L fill:#cfc,stroke:#333,stroke-width:2px\nstyle N fill:#ffc,stroke:#333,stroke-width:2px\nstyle O fill:#e0e0e0,stroke:#333,stroke-width:2px\n```\n\n## 모듈 다이어그램\n\n```mermaid\ngraph TD\n    subgraph Core Orchestration\n        A[main.py]\n    end\n\n    subgraph Configuration & Utilities\n        B[config.py]\n        C[logging_config.py]\n    end\n\n    subgraph Analysis Layer\n        D[file_tree_analyzer.py]\n        E[readme_parser.py]\n    end\n\n    subgraph LLM & Generation Layer\n        F[gemini_client.py]\n        G[prompts.py]\n        H[wiki_generator.py]\n    end\n\n    subgraph Output & Persistence Layer\n        I[cache_manager.py]\n        J[markdown_exporter.py]\n        K[mermaid_validator.py]\n    end\n\n    A --> B\n    A --> C\n    A --> D\n    A --> E\n    A",
  "metadata": {
    "description": "프로젝트 구조 개요 및 주요 기능 (아키텍처 다이어그램 & 모듈 다이어그램 & 플로우 다이어그램 포함)"
  },
  "created_at": "2025-10-16T00:46:06.871556",
  "content_hash": "29dd5252f8ba5db6d3ddfcaaefb09709f9feca3773e92aec349deb083e3b4b3f"
}