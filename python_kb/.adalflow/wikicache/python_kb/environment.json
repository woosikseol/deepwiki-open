{
  "page_type": "environment",
  "page_title": "환경 설정 및 가이드",
  "content": "# 환경 설정 및 가이드\n\n이 문서는 `python_kb` 프로젝트 개발을 위한 환경 설정 방법을 안내합니다.\n\n## 전제 조건\n\n### 시스템 요구 사항\n- **운영 체제**: Linux, macOS, Windows (Python 3.11.9를 지원하는 모든 OS)\n- **Python 버전**: `Python 3.11.9`\n- **기타 도구**:\n    - `pip` (Python 패키지 관리자)\n    - `git` (소스 코드 관리)\n    - `Google Gemini API 키` ([Google AI Studio](https://makersuite.google.com/app/apikey)에서 발급)\n\n### 필수 의존성\n`requirements.txt` 파일에 명시된 주요 Python 패키지들은 다음과 같습니다:\n- `google-generativeai>=0.8.0`: Google Gemini API와의 상호작용을 위한 라이브러리.\n- `python-dotenv>=1.0.0`: `.env` 파일에서 환경 변수를 로드하기 위한 라이브러리.\n\n이 프로젝트는 상위 `deepwiki-open` 프로젝트의 공유 가상 환경 (`../.venv`)을 사용하도록 설계되었습니다.\n\n## 설치 가이드\n\n### 1단계: Python 및 가상 환경 설정\n`python_kb`는 상위 `deepwiki-open` 프로젝트의 가상 환경을 공유합니다. 먼저 `deepwiki-open` 저장소를 클론하고 가상 환경을 설정합니다.\n\n```bash\n# 1. deepwiki-open 저장소 클론 (이미 클론했다면 생략)\n# git clone https://github.com/your-org/deepwiki-open.git\n# cd deepwiki-open\n\n# 2. 가상 환경 생성 및 활성화 (deepwiki-open 프로젝트 루트에서)\n# .venv 디렉토리가 없다면 생성\npython3.11 -m venv .venv\nsource .venv/bin/activate\n\n# 3. python_kb 디렉토리로 이동\ncd python_kb\n```\n\n### 2단계: 의존성 설치\n`python_kb` 프로젝트 디렉토리로 이동한 후, `requirements.txt`에 명시된 모든 의존성을 설치합니다.\n\n```bash\n# python_kb 디렉토리 내에서 실행\npip install -r requirements.txt\n```\n\n### 3단계: 환경 변수 설정\n\n#### 환경 변수 파일 (`.env`) 생성\n프로젝트의 루트 디렉토리 (`python_kb/`)에 `.env` 파일을 생성하고, 필요한 환경 변수들을 설정합니다. 특히 `GEMINI_API_KEY`는 필수입니다.\n\n```bash\n# python_kb/.env 파일 생성\ncat > .env << 'EOF'\n# Gemini API Configuration\nGEMINI_API_KEY=YOUR_GEMINI_API_KEY_HERE\n\n# PostgreSQL Configuration (향후 사용을 위해 포함될 수 있음)\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=deepwiki\nDB_USER=postgres\nDB_PASSWORD=\nEOF\n```\n**주의**: `YOUR_GEMINI_API_KEY_HERE` 부분을 [Google AI Studio](https://makersuite.google.com/app/apikey)에서 발급받은 실제 Gemini API 키로 교체해야 합니다.\n\n#### Gemini API 키 발급 방법\n1.  [Google AI Studio](https://makersuite.google.com/app/apikey)에 접속합니다.\n2.  \"Get API Key\" 버튼을 클릭합니다.\n3.  생성된 API 키를 복사하여 `.env` 파일의 `GEMINI_API_KEY` 값으로 입력합니다.\n\n#### 설정 파일\n현재 프로젝트는 `.env` 파일을 통해 환경 변수를 관리하며, 별도의 복잡한 설정 파일은 없습니다. `config.py` 파일에서 이러한 환경 변수들을 로드하여 사용합니다.\n\n## 검증\n\n### 설치 확인\nPython 버전과 설치된 패키지 목록을 확인하여 환경 설정이 올바르게 되었는지 검증합니다.\n\n```bash\n# 가상 환경이 활성화된 상태에서 Python 버전 확인\npython --version\n\n# 설치된 패키지 목록 확인\npip list | grep -E 'google-generativeai|python-dotenv'\n```\n**예상 출력**:\n```\nPython 3.11.9\ngoogle-generativeai             0.8.0\npython-dotenv                   1.0.0\n```\n(버전은 다를 수 있습니다.)\n\n### 테스트 실행\n프로젝트에 포함된 테스트 스크립트를 실행하여 기본적인 기능이 올바르게 작동하는지 확인합니다. `pytest`가 `requirements.txt`에 포함되어 있지 않으므로, 필요하다면 별도로 설치해야 합니다.\n\n```bash\n# pytest 설치 (아직 설치되지 않았다면)\npip install pytest\n\n# 테스트 실행\npytest\n```\n**예상 출력**:\n```\n============================= test session starts ==============================\n...\ncollected 2 items\n\ntest_example.py ..                                                       [100%]\ntest_llm_validator.py ..                                                 [100%]\n\n============================== 2 passed in X.XXs ===============================\n```\n(테스트 결과는 프로젝트의 현재 상태에 따라 다를 수 있습니다.)\n\n### 예상 출력\n성공적인 환경 설정 후, `main.py` 스크립트를 실행하면 지정된 프로젝트의 분석 결과가 Markdown 파일로 `python_kb/.adalflow/wikicache/<project_name>/` 디렉토리에 생성됩니다.\n\n```bash\n# 예시: python_chunking 프로젝트 분석 실행\npython main.py ../python_chunking/\n\n# 생성된 파일 목록 확인\nls -la .adalflow/wikicache/python_chunking/\n```\n**예상 출력**:\n```\ntotal 160\ndrwxr-xr-x   9 user  group   288  1 15 10:00 .\ndrwxr-xr-x   3 user  group    96  1 15 10:00 ..\n-rw-r--r--   1 user  group  1024  1 15 10:00 architecture.json\n-rw-r--r--   1 user  group  2048  1 15 10:00 architecture.md\n-rw-r--r--   1 user  group  1024  1 15 10:00 conventions.json\n-rw-r--r--   1 user  group  2048  1 15 10:00 conventions.md\n-rw-r--r--   1 user  group  1024  1 15 10:00 environment.json\n-rw-r--r--   1 user  group  2048  1 15 10:00 environment.md\n-rw-r--r--   1 user  group  1024  1 15 10:00 project_metadata.json\n-rw-r--r--   1 user  group  1024  1 15 10:00 project_structure.json\n-rw-r--r--   1 user  group  2048  1 15 10:00 project_structure.md\n```\n(파일 목록 및 크기는 분석 대상 프로젝트에 따라 다를 수 있습니다.)\n\n## 개발 워크플로우\n\n### 프로젝트 실행\n\n#### 개발 모드\n개발 중에는 `--verbose` 플래그를 사용하여 상세 로그를 확인하거나, `--no-cache` 또는 `--force` 플래그를 사용하여 캐시를 무시하고 새로 생성할 수 있습니다.\n\n```bash\n# 가상 환경 활성화 (deepwiki-open 프로젝트 루트에서)\n# source ../.venv/bin/activate\n# cd python_kb\n\n# 상세 로그와 함께 python_chunking 프로젝트 분석 (캐시 사용 안 함)\npython main.py ../python_chunking/ --verbose --no-cache\n\n# 기존 캐시를 무시하고 강제로 재생성\npython main.py ../python_chunking/ --force\n\n# 영어로 Wiki 생성\npython main.py ../python_chunking/ --language en\n```\n\n#### 프로덕션 모드\n`python_kb`는 CLI 도구이므로, \"프로덕션 모드\"는 일반적으로 추가적인 디버깅 플래그 없이 도구를 실행하여 지식 기반을 생성하는 것을 의미합니다.\n\n```bash\n# 가상 환경 활성화 (deepwiki-open 프로젝트 루트에서)\n# source ../.venv/bin/activate\n# cd python_kb\n\n# python_chunking 프로젝트 분석 (기본 설정, 캐시 사용)\npython main.py ../python_chunking/\n\n# 현재 디렉토리의 프로젝트 분석\npython main.py ./\n```\n\n### 일반 명령어\n- `python main.py <project_path>`: 지정된 프로젝트의 지식 기반을 생성합니다.\n- `python main.py <project_path> --language en`: 지식 기반을 영어로 생성합니다.\n- `python main.py <project_path> --no-cache`: 캐시를 사용하지 않고 새로 생성합니다.\n- `python main.py <project_path> --force`: 기존 캐시를 무시하고 강제로 재생성합니다.\n- `python main.py <project_path> --verbose`: 상세 로그를 출력합니다.\n- `python main.py <project_path> --cache-only`: 캐시된 데이터만 사용하여 Markdown을 생성합니다.\n- `python main.py <project_path> --validate-mermaid`: Mermaid 다이어그램 구문만 검증합니다.\n- `python main.py <project_path> --fix-mermaid`: Mermaid 구문 오류를 자동으로 수정합니다.\n\n## 문제 해결\n\n### 문제 1: Gemini API 키 누락 또는 오류\n**문제**: `google.generativeai.types.core.APIError: API key not found.` 또는 인증 오류가 발생합니다.\n**해결**:\n1.  `python_kb/.env` 파일이 올바르게 생성되었는지 확인합니다.\n2.  `.env` 파일 내의 `GEMINI_API_KEY` 값이 [Google AI Studio](https://makersuite.google.com/app/apikey)에서 발급받은 유효한 API 키인지 다시 확인합니다.\n3.  API 키 앞뒤에 공백이 없는지 확인합니다.\n\n### 문제 2: 가상 환경이 활성화되지 않음\n**문제**: `ModuleNotFoundError`가 발생하거나 `pip install` 명령이 전역 Python 환경에 패키지를 설치합니다.\n**해결**:\n1.  `deepwiki-open` 프로젝트 루트 디렉토리로 이동합니다.\n2.  `source .venv/bin/activate` 명령을 사용하여 가상 환경을 활성화합니다.\n3.  가상 환경이 활성화되면 터미널 프롬프트에 `(.venv)`와 같은 표시가 나타나는지 확인합니다.\n\n### 문제 3: `requirements.txt` 파일을 찾을 수 없음\n**문제**: `pip install -r requirements.txt` 명령 실행 시 `No such file or directory: 'requirements.txt'` 오류가 발생합니다.\n**해결**:\n1.  현재 작업 디렉토리가 `python_kb` 프로젝트 루트인지 확인합니다. `pwd` 명령으로 현재 경로를 확인하고, 필요하다면 `cd python_kb`로 이동합니다.\n2.  `requirements.txt` 파일이 `python_kb` 디렉토리 내에 존재하는지 확인합니다.\n\n## 추가 자료\n- **Google AI Studio**: [https://makersuite.google.com/app/apikey](https://makersuite.google.com/app/apikey) (Gemini API 키 발급)\n- **Deepwiki 프로젝트**: [https://github.com/deep-wiki/deepwiki-open](https://github.com/deep-wiki/deepwiki-open) (이 프로젝트의 기반이 된 원본 프로젝트)\n\n## 개발 팁\n- **캐시 활용**: `python_kb/.adalflow/wikicache/<project_name>/` 디렉토리에 생성되는 캐시 파일을 이해하면 LLM 호출 비용을 절약하고 개발 속도를 높일 수 있습니다. `--no-cache` 또는 `--force` 옵션을 사용하여 캐시 동작을 제어할 수 있습니다.\n- **Mermaid 다이어그램 검증**: `--validate-mermaid` 및 `--fix-mermaid` 옵션을 활용하여 LLM이 생성한 Mermaid 다이어그램의 구문 오류를 쉽게 검증하고 수정할 수 있습니다. 이는 다이어그램의 품질을 높이는 데 매우 유용합니다.\n- **로깅**: `--verbose` 플래그를 사용하여 상세한 로그를 확인하면 문제 발생 시 디버깅에 큰 도움이 됩니다. `logging_config.py` 파일을 통해 로깅 설정을 커스터마이징할 수도 있습니다.",
  "metadata": {
    "description": "환경 설정 및 구성 가이드"
  },
  "created_at": "2025-10-17T04:52:18.110310",
  "content_hash": "8c16d289d801bfb2fab9db2c534288aa3955092ee7cd3c3a31a905c0437d73ca"
}