{
  "page_type": "environment",
  "page_title": "환경 설정 및 가이드",
  "content": "# 환경 설정 및 가이드\n\n이 문서는 `python_kb` 프로젝트를 개발하고 실행하기 위한 환경 설정 방법을 안내합니다.\n\n## 사전 요구 사항\n\n### 시스템 요구 사항\n- 운영 체제: Linux, macOS, Windows (Python 3.11.9를 지원하는 모든 OS)\n- Python 버전: 3.11.9\n- 기타 도구: Git, Google Gemini API 키\n\n### 필수 의존성\n`python_kb` 프로젝트는 다음 Python 패키지에 의존합니다:\n- `google-generativeai>=0.8.0` (Google Gemini API 통신)\n- `python-dotenv>=1.0.0` (환경 변수 관리)\n\n## 설치 가이드\n\n이 프로젝트는 상위 `deepwiki-open` 프로젝트의 가상 환경을 공유하여 사용합니다.\n\n### 1단계: Python 3.11.9 설치 확인\n프로젝트는 Python 3.11.9 버전을 요구합니다. 시스템에 해당 버전이 설치되어 있는지 확인하고, 필요하다면 설치합니다. `pyenv`, `conda`, 또는 OS의 패키지 관리자를 사용하여 설치할 수 있습니다.\n\n```bash\n# 설치된 Python 버전 확인\npython3.11 --version\n```\n\n### 2단계: 상위 저장소 클론 및 프로젝트 이동\n`python_kb` 프로젝트는 `deepwiki-open` 저장소의 하위 디렉토리로 존재합니다. 먼저 `deepwiki-open` 저장소를 클론하고 `python_kb` 디렉토리로 이동합니다.\n\n```bash\n# 상위 저장소 클론 (예시 URL, 실제 저장소 URL로 대체하세요)\ngit clone https://github.com/your-org/deepwiki-open.git\ncd deepwiki-open\n\n# python_kb 디렉토리로 이동\ncd python_kb\n```\n\n### 3단계: 가상 환경 활성화 및 의존성 설치\n`deepwiki-open` 프로젝트의 루트에 있는 공유 가상 환경을 활성화하고 `python_kb`의 의존성을 설치합니다.\n\n```bash\n# python_kb 디렉토리에서 상위 디렉토리로 이동하여 가상 환경 활성화\ncd ..\nsource .venv/bin/activate\n\n# 다시 python_kb 디렉토리로 이동\ncd python_kb\n\n# 의존성 설치\npip install -r requirements.txt\n```\n\n### 4단계: 설정\n\n#### 환경 변수\n`python_kb` 디렉토리 내에 `.env` 파일을 생성하고 다음 환경 변수를 설정해야 합니다. 특히 `GEMINI_API_KEY`는 필수입니다.\n\n```bash\n# python_kb/.env 파일 생성\ncat > .env << 'EOF'\n# Gemini API Configuration\nGEMINI_API_KEY=YOUR_GEMINI_API_KEY_HERE\n\n# PostgreSQL Configuration (향후 사용 예정)\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=deepwiki\nDB_USER=postgres\nDB_PASSWORD=\nEOF\n```\n**주의:** `YOUR_GEMINI_API_KEY_HERE`를 실제 발급받은 Gemini API 키로 대체해야 합니다.\n\n**Gemini API 키 발급 방법:**\n1. [Google AI Studio](https://makersuite.google.com/app/apikey)에 접속합니다.\n2. \"Get API Key\" 버튼을 클릭합니다.\n3. 생성된 API 키를 `.env` 파일에 입력합니다.\n\n#### 설정 파일\n`config.py` 파일은 프로젝트의 내부 설정을 관리하지만, 일반적으로 개발자가 직접 수정할 필요는 없습니다. 모든 사용자 관련 설정은 `.env` 파일을 통해 이루어집니다.\n\n## 설치 확인\n\n### 설치 확인\n가상 환경이 올바르게 설정되고 모든 의존성이 설치되었는지 확인합니다.\n\n```bash\n# 가상 환경이 활성화된 상태에서 (python_kb 디렉토리 내)\npython --version\n# 예상 출력: Python 3.11.9 (또는 유사)\n\npip list | grep google-generativeai\n# 예상 출력: google-generativeai 0.8.0 (또는 그 이상 버전)\n\n# 프로젝트 실행을 통해 환경 설정 검증\n# 예시: python_chunking 프로젝트 분석 (상위 디렉토리의 다른 프로젝트)\npython main.py ../python_chunking/\n```\n\n### 테스트 실행\n프로젝트에는 `test_example.py` 파일이 포함되어 있습니다. 현재 `pytest`와 같은 특정 테스트 러너는 명시적으로 설정되어 있지 않으므로, 파일을 직접 실행하여 기본적인 기능을 확인할 수 있습니다.\n\n```bash\n# 가상 환경이 활성화된 상태에서 (python_kb 디렉토리 내)\npython test_example.py\n```\n**참고**: `test_example.py`의 내용에 따라 실제 테스트 동작 및 출력이 달라질 수 있습니다.\n\n### 예상 결과\n위 `python main.py ../python_chunking/` 명령을 성공적으로 실행하면, `python_kb/.adalflow/wikicache/python_chunking/` 디렉토리 내에 다음과 같은 Markdown 및 JSON 파일들이 생성됩니다:\n- `project_structure.md`\n- `architecture.md`\n- `conventions.md`\n- `environment.md`\n- 관련 `.json` 캐시 파일들\n\n## 개발 워크플로우\n\n### 프로젝트 실행\n\n#### 개발 모드\n개발 중에는 다양한 옵션을 사용하여 프로젝트를 실행하고 상세 로그를 확인할 수 있습니다.\n\n```bash\n# 가상 환경 활성화 (deepwiki-open/ .venv)\ncd /path/to/deepwiki-open\nsource .venv/bin/activate\ncd python_kb\n\n# 상세 로그와 함께 python_chunking 프로젝트 분석\npython main.py ../python_chunking/ --verbose\n\n# 캐시를 사용하지 않고 새로 생성\npython main.py ../python_chunking/ --no-cache\n\n# 기존 캐시를 무시하고 강제로 재생성\npython main.py ../python_chunking/ --force\n\n# 영어로 Wiki 생성\npython main.py ../python_chunking/ --language en\n\n# Mermaid 다이어그램 구문 검증\npython main.py ../python_chunking/ --validate-mermaid\n\n# Mermaid 구문 오류 자동 수정\npython main.py ../python_chunking/ --fix-mermaid\n```\n\n#### 표준 실행 모드\n일반적인 사용 또는 \"운영\" 모드에 가까운 실행은 추가 옵션 없이 프로젝트를 분석합니다. 캐시가 활성화되어 있으면 재분석 시 빠르게 문서를 생성합니다.\n\n```bash\n# 가상 환경 활성화 후 python_kb 디렉토리에서\npython main.py <분석할_프로젝트_경로>\n```\n\n### 일반적인 명령어\n- `python main.py <project_path>`: 지정된 프로젝트를 분석하고 Wiki를 생성합니다.\n- `python main.py <project_path> --language en`: 영문으로 Wiki를 생성합니다.\n- `python main.py <project_path> --force`: 기존 캐시를 무시하고 강제로 Wiki를 재생성합니다.\n- `python main.py <project_path> --cache-only`: LLM 호출 없이 캐시된 데이터만 사용하여 Markdown 파일을 생성합니다.\n- `python main.py <project_path> --verbose`: 상세한 실행 로그를 출력하여 디버깅에 도움을 줍니다.\n\n## 문제 해결\n\n### 문제 1: `GEMINI_API_KEY` 누락 또는 잘못됨\n**문제**: `GEMINI_API_KEY`가 `.env` 파일에 없거나 잘못되어 LLM 호출이 실패합니다.\n**해결**: `python_kb/.env` 파일이 존재하는지 확인하고, `GEMINI_API_KEY` 변수에 유효한 Gemini API 키가 올바르게 입력되었는지 확인하세요. Google AI Studio에서 키를 다시 발급받을 수도 있습니다.\n\n### 문제 2: 가상 환경이 활성화되지 않음\n**문제**: `ModuleNotFoundError`가 발생하거나 `pip install`이 시스템 전역으로 설치됩니다.\n**해결**: `deepwiki-open` 프로젝트의 루트 디렉토리에서 `source .venv/bin/activate` 명령을 사용하여 가상 환경을 활성화했는지 확인하세요. `(venv)` 또는 유사한 표시가 터미널 프롬프트에 나타나야 합니다.\n\n### 문제 3: 대상 프로젝트 경로 오류\n**문제**: `python main.py <project_path>` 실행 시, `<project_path>`를 찾을 수 없다는 오류가 발생합니다.\n**해결**: `<project_path>`가 `main.py`를 실행하는 현재 작업 디렉토리(보통 `python_kb`)를 기준으로 올바른 상대 경로 또는 절대 경로인지 확인하세요. 예를 들어, `deepwiki-open`의 하위 프로젝트인 `python_chunking`을 분석하려면 `../python_chunking/`와 같이 상대 경로를 사용합니다.\n\n## 추가 자료\n- [Google AI Studio](https://makersuite.google.com/app/apikey): Gemini API 키 발급\n- [Deepwiki 프로젝트](https://github.com/deep-wiki/deepwiki-open): `python_kb`의 기반이 된 프로젝트\n- [Python 공식 문서](https://docs.python.org/3/): Python 언어 및 표준 라이브러리 참조\n\n## 개발 팁\n- **상세 로그 활용**: `--verbose` 플래그를 사용하여 코드의 실행 흐름과 LLM 호출 및 응답을 자세히 살펴보세요.\n- **캐시 구조 이해**: `python_kb/.adalflow/wikicache/` 디렉토리의",
  "metadata": {
    "description": "환경 설정 및 구성 가이드"
  },
  "created_at": "2025-10-16T00:49:01.079445",
  "content_hash": "9e050bb20a95b689d68f1a646215dba8c29967b383d657191a5d3df50485fbb6"
}