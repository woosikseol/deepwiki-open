{
  "page_type": "environment",
  "page_title": "환경 설정 및 가이드",
  "content": "# 환경 설정 가이드\n\n## 사전 준비 사항\n\n### 시스템 요구 사항\n- 운영체제: 모든 주요 운영체제 (macOS, Linux, Windows)\n- Python 버전: 3.11.9 이상\n- 기타 도구: Git\n\n### 필수 의존성\n- google-generativeai>=0.8.0\n- python-dotenv>=1.0.0\n\n## 설치 가이드\n\n### 1단계: Python 설치\n```bash\n# Homebrew를 사용하는 macOS의 경우:\nbrew install python@3.11\n\n# apt를 사용하는 Ubuntu/Debian의 경우:\nsudo apt update\nsudo apt install python3.11 python3.11-venv\n\n# Windows의 경우:\n# Python 공식 웹사이트 (https://www.python.org/downloads/)에서 설치 프로그램을 다운로드하여 실행합니다.\n# 설치 시 \"Add Python to PATH\" 옵션을 선택해야 합니다.\n```\n\n### 2단계: 저장소 복제\n```bash\ngit clone <저장소 URL>\ncd python_kb\n```\n\n### 3단계: 의존성 설치\n프로젝트 루트 디렉토리에서 다음 명령을 실행합니다.\n```bash\n# 프로젝트 루트의 가상환경 사용 (python_chunking과 공유하는 경우)\ncd /Users/woosik/repository/deepwiki-open # 필요에 따라 경로 조정\nsource .venv/bin/activate\n\n# python_kb 디렉토리로 이동\ncd python_kb\n\npip install -r requirements.txt\n```\n\n### 4단계: 환경 설정\n\n#### 환경 변수\n`.env` 파일을 생성하고 Gemini API 키를 설정합니다. `.env.example` 파일을 복사하여 편집하는 것이 좋습니다.\n```bash\ncp .env.example .env\n```\n\n`.env` 파일 내용 예시:\n```\nGEMINI_API_KEY=your_actual_api_key_here\n```\n\n**Gemini API 키 발급 방법:**\n1. [Google AI Studio](https://makersuite.google.com/app/apikey)에 접속합니다.\n2. \"Get API Key\"를 클릭합니다.\n3. 생성된 API 키를 `.env` 파일에 입력합니다.\n\n#### 설정 파일\n`config.py` 파일은 필요에 따라 수정할 수 있습니다. 기본 설정은 대부분의 경우에 적합합니다.\n\n## 검증\n\n### 설치 확인\nPython 및 필요한 패키지가 제대로 설치되었는지 확인합니다.\n```bash\npython --version\npip show google-generativeai python-dotenv\n```\n\n### 테스트 실행\n테스트 코드는 `test_example.py` 에 존재합니다. 다음 명령어로 실행할 수 있습니다.\n\n```bash\n# pytest 설치 (필요한 경우)\npip install pytest\n\n# 테스트 실행\npytest\n```\n\n### 예상 출력\n테스트가 성공적으로 실행되면, 모든 테스트가 통과했다는 메시지가 표시됩니다.\n\n## 개발 워크플로우\n\n### 프로젝트 실행\n\n#### 개발 모드\n```bash\n# python_chunking 프로젝트 분석 (개발 모드)\npython main.py ../python_chunking/ --verbose\n```\n\n#### 운영 모드\n운영 환경에서는 `--verbose` 옵션을 제거하여 로그 출력을 최소화할 수 있습니다.\n```bash\n# python_chunking 프로젝트 분석 (운영 모드)\npython main.py ../python_chunking/\n```\n\n### 일반적인 명령어\n- `python main.py <project_path>`: 지정된 프로젝트 경로를 분석하고 Knowledge Base를 생성합니다.\n- `python main.py <project_path> --no-cache`: 캐시를 사용하지 않고 새로운 Knowledge Base를 생성합니다.\n- `python main.py <project_path> --language en`: Knowledge Base를 영어로 생성합니다.\n\n## 문제 해결\n\n### 문제 1: Gemini API 키 오류\n**문제**: `GEMINI_API_KEY` 환경 변수가 설정되지 않았거나 잘못 설정되었습니다.\n**해결 방법**: `.env` 파일에 올바른 API 키가 입력되었는지 확인하고, 가상 환경이 활성화되었는지 확인합니다.\n\n### 문제 2: 의존성 설치 오류\n**문제**: `requirements.txt`에 명시된 패키지가 설치되지 않았습니다.\n**해결 방법**: `pip install -r requirements.txt` 명령어를 다시 실행하고, 오류 메시지를 확인하여 누락된 시스템 의존성이 있는지 확인합니다.\n\n## 추가 자료\n- [Google AI Studio](https://makersuite.google.com/app/apikey): Gemini API 키 발급\n- [Deepwiki GitHub](https://github.com/deep-wiki/deepwiki-open): Deepwiki 프로젝트\n\n## 개발 팁\n- 코드를 변경하기 전에 항상 최신 버전을 가져오고, 새로운 브랜치를 생성하여 작업합니다.\n- 코드 변경 후에는 반드시 테스트를 실행하여 변경 사항이 기존 기능에 영향을 미치지 않는지 확인합니다.\n- 커밋 메시지는 명확하고 간결하게 작성합니다.\n",
  "metadata": {
    "description": "환경 설정 및 구성 가이드"
  },
  "created_at": "2025-10-15T16:59:44.115049",
  "content_hash": "a68db0c59e55c287f0866d9b8a2bf756d118cdff37861baac9f41c9bce2ef81b"
}